/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '2.7.17'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.runtime' version '1.12.5'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    api 'org.springframework.boot:spring-boot-starter'
    api 'org.apache.parquet:parquet-avro:1.12.0'
    api 'org.apache.hadoop:hadoop-common:3.2.4'
    api 'org.apache.hadoop:hadoop-client:3.0.0'
    api 'com.google.code.gson:gson:2.8.9'
    api 'org.apache.hive:hive-exec:3.1.2'
    api 'org.apache.orc:orc-core:1.6.2'
    api 'org.apache.hadoop:hadoop-hdfs:3.2.1'
    api 'com.amazonaws:aws-java-sdk:1.11.327'
    api 'org.xerial:sqlite-jdbc:3.41.2.2'
    api 'commons-cli:commons-cli:1.3.1'
    api 'org.xerial.snappy:snappy-java:1.1.10.4'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'junit:junit:4.13.1'
}

group = 'org.eugene'
version = '1.3.1'
description = 'BigdataFileViewer'
java.sourceCompatibility = JavaVersion.VERSION_15

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

javafx {
    modules = ['javafx.controls', 'javafx.fxml']
}

application {
    mainClass = "org.eugene.App"
    applicationName = 'BigdataFileViewer'
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

// Uncomment and adjust the code below if you want to generate images for multiple platforms.
// (You need to also uncomment the line 'targetPlatformName = ...' in the jpackage block.)
//
    targetPlatform("lin") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_linux_hotspot_15.0.2_7.tar.gz")
    }

    targetPlatform("mac") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_mac_hotspot_15.0.2_7.tar.gz") {
            downloadDir = "$buildDir/myMac"
            archiveName = "my-mac-jdk"
            archiveExtension = "tar.gz"
            pathToHome = "jdk-15.0.2+7/Contents/Home"
            overwrite = true
        }
    }
/*
    targetPlatform("win") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_windows_hotspot_15.0.2_7.zip")
    }
*/

    launcher {
        noConsole = true
    }
    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
         targetPlatformName = "lin"

        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/resources/icons8-owl-64.${imgType}"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Acme Corporation']

        if (currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
        else if (currentOs.linux) {
            installerType = "deb"
            installerOptions += ['--linux-package-name', 'bigdata-file-viewer','--linux-shortcut']
        }
        else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'bigdata-file-viewer']
        }
    }
}
